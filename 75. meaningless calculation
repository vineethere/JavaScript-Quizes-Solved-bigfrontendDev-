// https://bigfrontend.dev/quiz/meaningless-calculation

const num = +((~~!+[])+(~~!+[])+[]+(~~!+[]))
console.log(num)






// The expression const num = +((~~!+[])+(~~!+[])+[]+(~~!+[])) is a bit tricky, but let's break it down step by step:

// 1. Understanding +[]:

// [] is an empty array, and when you apply the + unary operator, JavaScript tries to convert the array into a number. Since an empty array is considered a falsy value, the result will be 0.

// So, +[] is equal to 0.

// 2. Understanding !+[]:

// +[] is 0, so !+[] is !0, which evaluates to true.

// true is coerced into 1 when used in an arithmetic context.

// 3. Understanding ~~!+[]:

// ~~ is a double bitwise NOT operation, which converts a value to a 32-bit integer.

// ~~true is ~~1, which results in 1.

// So, ~~!+[] is 1.

// 4. Putting it all together:

// Now let's rewrite the entire expression with the above steps:



// Breaking it down:

// ~~!+[] → 1

// (~~!+[]) + (~~!+[]) → 1 + 1 → 2

// [] is an empty array, so [] in this context is 0 when coerced to a number.

// Adding 0 to the result: 2 + 0 → 2

// Finally, ~~!+[] is 1, so adding 1 to 2: 2 + 1 → 3

// The + outside the parentheses coerces the result to a number, but it’s already a number, so the result is simply 3.

// SOlution 
// 21
