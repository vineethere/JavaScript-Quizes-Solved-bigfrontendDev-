// https://bigfrontend.dev/quiz/meaningless-calculation

const num = +((~~!+[])+(~~!+[])+[]+(~~!+[]))
console.log(num)





Key Concepts:

+[]:

[] is an empty array.

+[] converts the empty array to a number, resulting in 0.

!+[]:

+[] is 0, so !+[] is !0, which evaluates to true.

true becomes 1 in JavaScript when used in arithmetic expressions.

~~!+[]:

~~ is a double bitwise NOT operator, which coerces a value into a 32-bit integer.

~~true becomes ~~1, which results in 1.

[] (empty array):

An empty array [] in JavaScript, when used in a string context or with concatenation, becomes an empty string ("").

Full Expression Breakdown:

First part: ~~!+[]

+[] is 0.

!+[] is true (because !0 is true).

~~true results in 1.

Second part: ~~!+[] (again)

This is the same as the first part, so it’s also 1.

Third part: []

An empty array [] becomes an empty string ("") when coerced in string contexts.

Fourth part: ~~!+[] (again)

This part is the same as the first two, so it’s again 1.

Putting it together:
const num = +(1 + 1 + "" + 1);


First, 1 + 1 equals 2.

Then, 2 + "" (adding an empty string) results in "2".

Then, "2" + 1 results in "21" due to string concatenation.

Final Output:

The + at the beginning of the expression converts the string "21" into the number 21.

Conclusion: The result of the expression is 21.

// SOlution 
// 21
