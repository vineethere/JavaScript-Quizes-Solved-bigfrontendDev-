console.log( [] + {} )
console.log( + {} )
console.log( + [] )
console.log( {} + [])
console.log( ({}) + [])
console.log( ({}) + [])
console.log( ({}) + [])
console.log( {} +  + [])
console.log( {} +  + [] + {} )
console.log( {} +  + [] + {}  + [])




// Why the output is 
// [object Object]
// NaN
// 0
// [object Object]
// [object Object]
// [object Object]
// [object Object]
// [object Object]0
// [object Object]0[object Object]
// [object Object]0[object Object]

// 🔍 Background Concepts
// Before diving in, here are key rules in play:
// [] + {} → + with objects and arrays can trigger implicit type coercion (usually converting to strings).
// Unary + tries to convert the operand to a number.
// {} alone can be interpreted as a block, not an object literal, if not wrapped in parentheses.
// Adding objects or arrays often results in "[object Object]" or similar due to .toString() behavior.



// 🔑 Key Concepts
// +[] → 0
// Empty array converts to empty string "", and +"" is 0.
// +{} → NaN
// Plain objects can't be converted to numbers directly → Not a Number.
// [] + {} → "[object Object]"
// Array becomes "", object becomes "[object Object]", result is string concatenation
// ({}) + [] → "[object Object]"
// Parentheses force {} to be interpreted as an object literal, then it's coerced to a string.
// {} + [] → 0
// Without parentheses, {} is treated as a block, not an object → +[] gets evaluated as 0.
// String concatenation wins over numeric math when types are incompatible (e.g. "abc" + 1 → "abc1").

// Expression parsing matters!
// {} at the start can be either an object or a block depending on syntax.

// 🧪 Expression Outputs Recap
// Expression	Output	Notes
// [] + {}	[object Object]	String concat: "" + "[object Object]"
// +{}	NaN	Can't convert object to number
// +[]	0	[] → "" → 0
// { } + []	0	Treated as block; +[] → 0
// ({}) + []	[object Object]	Object coerced to string and added to empty array string
// ({}) + [] (repeated)	[object Object]	Same as above
// { } + +[]	0	Block + unary plus of array → +[] = 0
// { } + +[] + {}	[object Object]0[object Object]	Mixed string concatenation after coercion
// { } + +[] + {} + []	[object Object]0[object Object]	Continued string coercion and concatenation
