// https://bigfrontend.dev/quiz/structuredclone


const error = new Error('üò¢')
error.name = 'SyntaxError'
console.log(error instanceof Error)
console.log(error instanceof SyntaxError)

const clonededError = structuredClone(error)
console.log(clonededError instanceof Error)
console.log(clonededError instanceof SyntaxError)











// üìò Notes on structuredClone() with Error and SyntaxError
// ‚úÖ Overview of the Code
// const error = new Error('üò¢')
// error.name = 'SyntaxError'

// console.log(error instanceof Error)         // true
// console.log(error instanceof SyntaxError)   // false

// const clonededError = structuredClone(error)

// console.log(clonededError instanceof Error)         // true
// console.log(clonededError instanceof SyntaxError)   // true

// üß† Key Concepts
// 1. instanceof

// instanceof checks if an object is an instance of a certain class via its prototype chain.

// Just changing the .name property (like setting it to "SyntaxError") does not change the actual class or prototype.

// 2. structuredClone()

// A built-in JavaScript function used to deeply copy objects.

// Supports many built-in types.

// In modern JavaScript engines (like recent versions of Chrome and Node.js), it can clone Error objects while preserving their prototypes.

// üìå Behavior Before Cloning

// error instanceof Error ‚Üí true (because it's created using new Error()).

// error instanceof SyntaxError ‚Üí false (changing .name doesn‚Äôt change the actual type).

// üß™ Behavior After Cloning

// In modern environments, structuredClone() preserves the prototype of standard errors.

// Since .name was "SyntaxError", the JS engine may "upgrade" the cloned object to a SyntaxError type.

// As a result:

// clonededError instanceof Error ‚Üí true

// clonededError instanceof SyntaxError ‚Üí true

// This behavior may vary in older environments, where structuredClone() may return a plain object without the error prototype.

// üî¨ Things to Test or Inspect
// console.log(clonededError.constructor.name)
// // Likely output: "SyntaxError"

// console.log(Object.getPrototypeOf(clonededError))
// // Likely output: SyntaxError.prototype

// ‚ö†Ô∏è Cross-Environment Behavior

// Modern JavaScript engines (Chrome 123+, Node.js 20+) support this upgraded cloning behavior.

// Older versions may not ‚Äî in those cases, cloned errors lose their prototype and become plain objects.

// üõ†Ô∏è Optional: Manual Cloning if You Need Compatibility

// If you want to ensure prototype is preserved across environments:

// function cloneError(error) {
//   const Cls = error.constructor || Error
//   const clone = new Cls(error.message)
//   clone.name = error.name
//   clone.stack = error.stack
//   return clone
// }


// This manual method guarantees the clone has the right type.




// SOLUTION
// true
// false
// true
// true
